class Fspec {
    private var describes = #list[string];
    private var its = None[string];
    private var msgs = #list[string];
    private var status = true;

    private fun isatty: ofile -> bool = "flx::rtl::ioutil::flx_isatty($1)";
    private fun red(text: string) =>
        if stdout.isatty then AnsiTerminal::red_ text else text endif;
    private fun green(text: string) =>
        if stdout.isatty then AnsiTerminal::green_ text else text endif;

    private struct Expector[T] { value: T; }
    fun expects[T with Str[T]](x: T) => Expector x;

    private union Modifier[T] =
        | Should of Expector[T]
        | Shouldnt of Expector[T]
    ;
    private fun v[T](m: Modifier[T]) => match m with
        | Should x => x.value
        | Shouldnt x => x.value
    endmatch;
    private fun bapply[T](m: Modifier[T])(b: bool) => match m with
        | Should _ => b
        | Shouldnt _ => not b
    endmatch;
    private fun str[T with Str[T]](m: Modifier[T]) => match m with
        | Should x => x.value.str + " should"
        | Shouldnt x => x.value.str + " shouldn't"
    endmatch;

    fun should[T](x: Expector[T]) => Should x;
    fun shouldnt[T](x: Expector[T]) => Shouldnt x;

    private proc dstatus() => eprint$ if status then green "." else red "F" endif;

    proc error(msg: string) {
        var indent = 0;
        var m = "";
        gen id() = {
            i := indent;
            ++indent;
            return "  "*i;
        }

        for x in describes perform m += #id + "describes " + x + "\n";
        for x in its perform m += #id + "it " + x + "\n";
        m += #id + msg;
        msgs = m + msgs;
        status = false;
    }

    private proc basic_cmp[T](x: Modifier[T], rhs: T, f: 1->bool, err: string) =>
        if not x.bapply #f perform error$ f"%S %S %S" (x.str, err, rhs.str);

    proc eq[T with Eq[T]](x: Modifier[T])(rhs: T) =>
        basic_cmp (x, rhs, { x.v == rhs }, "eq");

    proc describe(descr: string)(f: 1->0) {
        describes = descr + describes;
        #f;
        describes = describes.tail;
        if describes.is_empty do
            eprintln "";
            for msg in msgs perform msg.red.eprintln;
        done
    }
    proc it(s: string)(f: 1->0) {
        for x in its perform
            eprintln$ f"WARNING: it is already %S; redefining it to %S" (x, s);
        orig := its;
        its = Some s;
        #f;
        its = orig;
        dstatus;
        status = true;
    }
}
